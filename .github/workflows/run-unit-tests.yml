name: Run pure unit tests

on:
  workflow_call:
    inputs:
      with_coverage:
        type: boolean
        required: false
        default: false
        description: "Set to 'true' to collect and upload code coverage data. Defaults to 'false'."
      with_tsan:
        type: boolean
        required: false
        default: true
        description: "Set to 'true' to run tests with Thread Sanitizer. Defaults to 'true'."
      test_filter:
        type: string
        required: false
        default: ''
        description: "Apply a --filter to the tests that will be run."
      subpath:
        type: string
        required: false
        default: ''
        description: "Run tests and upload coverage from a subpath of the repository. Used for testing the workflow."
      coverage_ignores:
        type: string
        required: false
        default: '/Tests/'
        description: "Additional source-relative paths to ignore when generating code coverage reports."
      extra_flags:
        type: string
        required: false
        default: ''
        description: "Additional 'swift test' flags to be applied on when testing on all platforms."
      extra_flags_linux:
        type: string
        required: false
        default: ''
        description: "Additional 'swift test' flags to be applied only when testing on Linux."
      extra_flags_macos:
        type: string
        required: false
        default: ''
        description: "Additional 'swift test' flags to be applied only when testing on macOS."
      extra_flags_windows:
        type: string
        required: false
        default: ''
        description: "Additional 'swift test' flags to be applied only when testing on Windows."

jobs:

  linux-unit:
    strategy:
      fail-fast: false
      matrix:
        swiftver:
          - swift:5.4
          - swift:5.5
          - swift:5.6
          - swiftlang/swift:nightly-5.7
          - swiftlang/swift:nightly-main
        swiftos:
          - focal
    runs-on: ubuntu-latest
    container: ${{ format('{0}-{1}', matrix.swiftver, matrix.swiftos) }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Run unit tests
        shell: bash
        env:
          SWIFT_DETERMINISTIC_HASHING: 1
        run: |
          cov=$([[ '${{ format('{0}', inputs.with_coverage) }}' == 'true' ]] && echo '--enable-code-coverage' || true)
          san=$([[ '${{ format('{0}', inputs.with_tsan) }}' == 'true' ]] && echo '--sanitize=thread' || true)
          flt=$([[ -n '${{ inputs.test_filter }}' ]] && echo '--filter=${{ inputs.test_filter }}' || true)
          pth=$([[ -n '${{ inputs.subpath }}' ]] && echo '--package-path ${{ inputs.subpath }}' || true)
          swift test ${pth} \
            ${cov} ${san} ${flt} \
            ${{ inputs.extra_flags }} ${{ inputs.extra_flags_linux }} \
            ${{ matrix.test_flag }}
      - name: Upload code coverage when present
        if: ${{ inputs.with_coverage }}
        uses: vapor/swift-codecov-action@v0.2
        with:
          package_path: ${{ inputs.subpath }}
          ignore_paths: ${{ inputs.coverage_ignores }}
          build_parameters: ${{ inputs.extra_flags }} ${{ inputs.extra_flags_linux }}
          cc_flags: 'unittests'
          cc_env_vars: 'SWIFT_VERSION,SWIFT_PLATFORM,RUNNER_OS,RUNNER_ARCH'
          cc_fail_ci_if_error: true
          cc_verbose: true

  macos-unit:
    strategy:
      fail-fast: false
      matrix:
        xcode:
          - latest
          - latest-stable
        include:
          - xcode: latest-stable
            extra_flags: '-Xlinker -rpath -Xlinker $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift-5.5/macosx'
    runs-on: macos-11
    steps:
      - name: Select appropriate Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode }}
      - name: Check out code
        uses: actions/checkout@v3
      - name: Run unit tests
        shell: bash
        env:
          SWIFT_DETERMINISTIC_HASHING: 1
        run: |
          cov=$([[ '${{ format('{0}', inputs.with_coverage) }}' == 'true' ]] && echo '--enable-code-coverage' || true)
          san=$([[ '${{ format('{0}', inputs.with_tsan) }}' == 'true' ]] && echo '--sanitize=thread' || true)
          flt=$([[ -n '${{ inputs.test_filter }}' ]] && echo '--filter=${{ inputs.test_filter }}' || true)
          pth=$([[ -n '${{ inputs.subpath }}' ]] && echo '--package-path ${{ inputs.subpath }}' || true)
          swift test ${pth} \
            ${cov} ${san} ${flt} \
            ${{ inputs.extra_flags }} ${{ inputs.extra_flags_macos }} ${{ matrix.extra_flags }} \
            --enable-test-discovery
      - name: Upload code coverage when present
        if: ${{ inputs.with_coverage }}
        uses: vapor/swift-codecov-action@v0.2
        with:
          package_path: ${{ inputs.subpath }}
          ignore_paths: ${{ inputs.coverage_ignores }}
          build_parameters: ${{ inputs.extra_flags }} ${{ inputs.extra_flags_macos }}
          cc_flags: 'unittests'
          cc_env_vars: 'MD_APPLE_SDK_ROOT,RUNNER_OS,RUNNER_ARCH'
          cc_fail_ci_if_error: true
          cc_verbose: true

  windows-unit:
    # Nothing works on Windows yet.
    if: ${{ false }}
    strategy:
      fail-fast: false
      matrix:
        swiftver:
          - 5.6
        include:
          - swiftver: 5.6
            swiftbranch: swift-5.6-RELEASE
            swifttag: 5.6-RELEASE
    runs-on: windows-latest
    steps:
      - name: Install Windows Swift toolchain
        uses: compnerd/gha-setup-swift@main
        with:
          branch: ${{ matrix.swiftbranch }}
          tag: ${{ matrix.swifttag }}
      - name: Track installed Swift version
        shell: bash
        run: echo 'SWIFT_VERSION=${{matrix.swiftbranch }}/${{ matrix.swifttag }}' >>"${GITHUB_ENV}"
      - name: Check out code
        uses: actions/checkout@v3
      - name: Run unit tests
        shell: bash
        env:
          SWIFT_DETERMINISTIC_HASHING: 1
        run: |
          cov=$([[ '${{ format('{0}', inputs.with_coverage) }}' == 'true' ]] && echo '--enable-code-coverage' || true)
          san=$([[ '${{ format('{0}', inputs.with_tsan) }}' == 'true' ]] && echo '--sanitize=thread' || true)
          flt=$([[ -n '${{ inputs.test_filter }}' ]] && echo '--filter=${{ inputs.test_filter }}' || true)
          pth=$([[ -n '${{ inputs.subpath }}' ]] && echo '--package-path ${{ inputs.subpath }}' || true)
          swift test ${pth} \
            ${cov} ${san} ${flt} \
            ${{ inputs.extra_flags }} ${{ inputs.extra_flags_windows }}
      - name: Upload code coverage when present
        if: ${{ inputs.with_coverage }}
        uses: vapor/swift-codecov-action@v0.2
        with:
          package_path: ${{ inputs.subpath }}
          ignore_paths: ${{ inputs.coverage_ignores }}
          build_parameters: ${{ inputs.extra_flags }} ${{ inputs.extra_flags_windows }}
          cc_flags: 'unittests'
          cc_env_vars: 'SWIFT_VERSION,RUNNER_OS,RUNNER_ARCH'
          cc_fail_ci_if_error: true
          cc_verbose: true
