name: benchmark
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.sha }}
  cancel-in-progress: true
on:
  workflow_call:
    inputs:
      sha:
        type: string
        required: false
        description: "The commit SHA to run the benchmarks against. Will use current ref if not provided."

env:
  RUN_LINK: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  CHECK_NAME: "benchmark / benchmark-vs-thresholds"

jobs:
  benchmark-vs-thresholds:
    # https://runs-on.com/features/custom-runners/
    runs-on:
      labels:
        - runs-on
        - runner=2cpu-4ram
        - run-id=${{ github.run_id }}

    container: swift:noble

    defaults:
      run:
        shell: bash --noprofile --norc -e -u -o pipefail {0}

    steps:
      - name: Configure RunsOn
        uses: runs-on/action@v1

      # jemalloc is a dependency of the Benchmarking package
      # actions/cache will detect zstd and will become much faster.
      - name: Install jemalloc, zstd, curl and jq
        run: |
          apt update -q && apt install -yq libjemalloc-dev zstd curl jq

      - name: Find commit info
        id: commit-info
        run: |
          if [[ -n '${{ inputs.sha }}' ]]; then
            FULL_SHA="$(curl "https://api.github.com/repos/vapor/multipart-kit/commits/${{ inputs.sha }}" | jq -r '.sha')"

            # Get the oldest PR that contains the commit
            PR="$(
              curl "https://api.github.com/search/issues?q=${FULL_SHA}" | \
                jq 'select(.items[].pull_request.url | contains("/${{ github.repository }}/")) | .items[-1]'
            )"

            PR_NUMBER="$(echo "${PR}" | jq -r '.number')"
            PR_TITLE="$(echo "${PR}" | jq -r '.title')"

            echo "ref=${FULL_SHA}" >> "${GITHUB_OUTPUT}"
            echo "sha=${FULL_SHA}" >> "${GITHUB_OUTPUT}"
            echo "pr_number=${PR_NUMBER}" >> "${GITHUB_OUTPUT}"
            echo "pr_title=${PR_TITLE}" >> "${GITHUB_OUTPUT}"
            SHORT_NAME="$(echo $FULL_SHA | cut -c 1-7)"
            FILES_LINK="https://github.com/${{ github.repository }}/pull/${PR_NUMBER}/commits/${FULL_SHA}"
          else
            echo 'ref=${{ github.ref }}' >> "${GITHUB_OUTPUT}"
            echo "sha=${GITHUB_SHA}" >> "${GITHUB_OUTPUT}"
            echo 'pr_number=' >> "${GITHUB_OUTPUT}"
            echo 'pr_title=' >> "${GITHUB_OUTPUT}"
            SHORT_NAME='${{ github.head_ref }}'
            FILES_LINK="https://github.com/${{ github.repository }}/commit/${GITHUB_SHA}"
          fi

          echo "md_link=[${SHORT_NAME}](${FILES_LINK})" >> "${GITHUB_OUTPUT}"

      - name: Create penny-bot token
        if: steps.commit-info.outputs.pr_number != ''
        id: create-penny-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.PENNY_APP_ID }}
          private-key: ${{ secrets.PENNY_APP_PRIVATE_KEY }}

      - name: Construct in-progress comment
        if: steps.commit-info.outputs.pr_number != ''
        run: |
          echo "## [Benchmark](${RUN_LINK}) Report for ${{ steps.commit-info.outputs.md_link }}" >> in-progress-comment.md
          echo 'Benchmark in progress...' >> in-progress-comment.md

      - name: Comment in PR
        if: steps.commit-info.outputs.pr_number != ''
        uses: thollander/actions-comment-pull-request@v3
        with:
          pr-number: ${{ steps.commit-info.outputs.pr_number }}
          file-path: in-progress-comment.md
          comment-tag: benchmark-ci-comment
          github-token: ${{ steps.create-penny-token.outputs.token }}

      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: "${{ steps.commit-info.outputs.ref }}"
          fetch-depth: 0

      - name: Configure git
        run: git config --global --add safe.directory "${GITHUB_WORKSPACE}"

      - name: Restore .build
        if: ${{ runner.debug != '1' }}
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: Benchmarks/.build
          key: "swiftpm-benchmark-build-${{ runner.os }}-${{ steps.commit-info.outputs.sha }}"
          restore-keys: "swiftpm-benchmark-build-${{ runner.os }}-"

      - name: Run benchmarks for '${{ steps.commit-info.outputs.pr_title }}'
        run: |
          swift package -c release --disable-sandbox \
            --package-path Benchmarks \
            benchmark baseline update \
            '${{ steps.commit-info.outputs.pr_title }}'

      - name: Read benchmark result
        run: |
          swift package -c release --disable-sandbox \
            --package-path Benchmarks \
            benchmark baseline read \
            '${{ steps.commit-info.outputs.pr_title }}' \
            --no-progress \
            --format markdown \
            >> benchmark.md

      - name: Compare '${{ steps.commit-info.outputs.pr_title }}' against thresholds
        id: comparison
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          ENCODED_TIMESTAMP=$(date -u +"%Y-%m-%dT%H%%3A%M%%3A%SZ")
          TIMESTAMP_LINK="https://www.timeanddate.com/worldclock/fixedtime.html?iso=$ENCODED_TIMESTAMP"
          echo "## Benchmark check running at [$TIMESTAMP]($TIMESTAMP_LINK)" >> comparison.md

          # Disable 'set -e' to prevent the script from exiting on non-zero exit codes
          set +e
          swift package -c release --disable-sandbox \
            --package-path Benchmarks \
            benchmark thresholds check \
            '${{ steps.commit-info.outputs.pr_title }}' \
            --path "$PWD/Benchmarks/Thresholds/" \
            --no-progress \
            --format markdown \
            >> comparison.md
          echo "exit-status=$?" >> "${GITHUB_OUTPUT}"
          set -e

      - name: Cache .build
        if: steps.restore-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: Benchmarks/.build
          key: "swiftpm-benchmark-build-${{ runner.os }}-${{ steps.commit-info.outputs.sha }}"

      - name: Construct result comment
        run: |
          echo "## [Benchmark](${RUN_LINK}) Report for ${{ steps.commit-info.outputs.md_link }}" >> comment.md

          EXIT_CODE='${{ steps.comparison.outputs.exit-status }}'

          case "${EXIT_CODE}" in
              0)
                  echo '**✅ Pull request has no significant performance differences ✅**' >> comment.md
                  ;;
              1)
                  echo '**❌ Pull request has significant performance differences 📊**' >> comment.md
                  ;;
              2)
                  echo '**❌ Pull request has significant performance regressions 📉**' >> comment.md
                  ;;
              4)
                  echo '**❌ Pull request has significant performance improvements 📈**' >> comment.md
                  ;;
              *)
                  echo '**❌ Benchmark comparison failed to complete properly with exit code $EXIT_CODE ❌**' >> comment.md
                  ;;
          esac

          echo '<details>' >> comment.md
          echo '  <summary> Click to expand comparison result </summary>' >> comment.md
          echo '' >> comment.md
          cat comparison.md >> comment.md
          echo '' >> comment.md
          echo '</details>' >> comment.md

          echo '' >> comment.md

          echo '<details>' >> comment.md
          echo '  <summary> Click to expand benchmark result </summary>' >> comment.md
          echo '' >> comment.md
          cat benchmark.md >> comment.md
          echo '' >> comment.md
          echo '</details>' >> comment.md

      - name: Update comment in PR
        if: steps.commit-info.outputs.pr_number != ''
        id: pr-comment
        uses: thollander/actions-comment-pull-request@v3
        with:
          pr-number: ${{ steps.commit-info.outputs.pr_number }}
          file-path: comment.md
          comment-tag: benchmark-ci-comment
          github-token: ${{ steps.create-penny-token.outputs.token }}

      - name: Output the comment as job summary
        run: |
          cat comment.md >> "${GITHUB_STEP_SUMMARY}"
          echo 'Commented at ${{ steps.pr-comment.outputs.html-url }}' >> "${GITHUB_STEP_SUMMARY}"

      - name: Update commit status
        if: steps.commit-info.outputs.pr_number != ''
        run: |
          STATE=$([ "${{ steps.comparison.outputs.exit-status }}" == '0' ] && echo 'success' || echo 'failure')
          BODY="$(
            jq -n \
              --arg state "${STATE}" \
              --arg url "${RUN_LINK}" \
              --arg context "${CHECK_NAME}" \
              '{state: $state, target_url: $url, context: $context}'
          )"
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ steps.create-penny-token.outputs.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            'https://api.github.com/repos/${{ github.repository }}/statuses/${{ steps.commit-info.outputs.sha }}' \
            -d "${BODY}"

      - name: Exit with correct status
        run: exit ${{ steps.comparison.outputs.exit-status }}
